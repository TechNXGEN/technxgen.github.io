<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Development Tools on NXGEN - Tech Blog</title><link>https://nxgen.tech/categories/development-tools/</link><description>Recent content in Development Tools on NXGEN - Tech Blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 01 Jan 2025 17:41:24 -0500</lastBuildDate><atom:link href="https://nxgen.tech/categories/development-tools/index.xml" rel="self" type="application/rss+xml"/><item><title>Streamline code analysis with AI chatbots using source code gatherer</title><link>https://nxgen.tech/blog/2025/01/01/streamline-code-analysis-with-ai-chatbots-using-source-code-gatherer/</link><pubDate>Wed, 01 Jan 2025 00:00:00 +0000</pubDate><guid>https://nxgen.tech/blog/2025/01/01/streamline-code-analysis-with-ai-chatbots-using-source-code-gatherer/</guid><description>&lt;div class="pageinfo pageinfo-primary">
&lt;p>Discover how to enhance your code analysis workflow using AI chatbots with a simple Python script that gathers source code from specified project folders. This tool helps you prepare your code for AI analysis while maintaining full control over the context provided to the AI.&lt;/p>

&lt;/div>

&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>While integrated development environments (IDEs) offer sophisticated code analysis tools, AI chatbots like Claude and ChatGPT have emerged as powerful alternatives for code understanding, documentation, and problem-solving. However, feeding your codebase to these AI tools can be cumbersome. This article introduces a simple Python script that streamlines this process by gathering all source code from a specified directory into a single text file.&lt;/p></description></item><item><title>Streamline Your Unreal Engine C++ Development with NXGEN Rider Code Plugin</title><link>https://nxgen.tech/blog/2024/12/14/streamline-your-unreal-engine-c-development-with-nxgen-rider-code-plugin/</link><pubDate>Sat, 14 Dec 2024 00:00:00 +0000</pubDate><guid>https://nxgen.tech/blog/2024/12/14/streamline-your-unreal-engine-c-development-with-nxgen-rider-code-plugin/</guid><description>&lt;div class="pageinfo pageinfo-primary">
&lt;p>Discover how to optimize your Unreal Engine C++ development workflow by using JetBrains Rider with the NXGEN Rider Code plugin. This guide covers installation, setup, and usage of features that streamline the interaction between Unreal Engine and Rider.&lt;/p>

&lt;/div>

&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>While Visual Studio has been the traditional choice for Unreal Engine C++ development, JetBrains Rider offers a powerful alternative with superior code analysis, faster performance, and better cross-platform support. The NXGEN Rider Code plugin bridges the gap between Unreal Engine and Rider, creating a seamless development experience.&lt;/p></description></item><item><title>Mastering CPU Configuration in QEMU: A Deep Dive into Virtual Development Environments</title><link>https://nxgen.tech/blog/2024/11/19/mastering-cpu-configuration-in-qemu-a-deep-dive-into-virtual-development-environments/</link><pubDate>Tue, 19 Nov 2024 00:00:00 +0000</pubDate><guid>https://nxgen.tech/blog/2024/11/19/mastering-cpu-configuration-in-qemu-a-deep-dive-into-virtual-development-environments/</guid><description>&lt;div class="pageinfo pageinfo-primary">
&lt;p>Learn how to properly configure CPU features in virtualized development environments using QEMU, with specific focus on compatibility with demanding applications like Unreal Engine 5. This guide covers common pitfalls and their solutions when setting up high-performance virtual machines for development work.&lt;/p>

&lt;/div>

&lt;h2 id="introduction">Introduction&lt;a class="td-heading-self-link" href="#introduction" aria-label="Heading self-link">&lt;/a>&lt;/h2>
&lt;p>Virtualization has become an integral part of modern development workflows, offering flexibility and isolation that traditional bare-metal setups cannot match. However, achieving optimal performance and compatibility in virtualized environments often requires careful configuration, particularly when dealing with CPU features and specialized software like Unreal Engine.&lt;/p></description></item></channel></rss>